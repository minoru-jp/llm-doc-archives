LLMプロンプト埋込用：Python疑似コード記述仕様 V1.0

目的
    本仕様は、Pythonコード内にLLM用プロンプトを構造的に埋め込むための記述ルールを定義する。
    ※本仕様で定義される疑似コードは、Pythonの構文に準拠しつつも、
      LLMによるコード生成を意図した記述であり、そのまま実行可能なコードではありません。

疑似コードの開始と終了
    `PSEUDO CODE START`の記述から`PSEUDO CODE END`までを疑似コードとする

補完ブロックの定義の開始と終了
    `COMPLETION BLOCK START`の記述から`COMPLETION BLOCK END`までを
    補完ブロック定義エリアとする

<...> メタ情報
    出現位置：
        - 関数・クラス・変数定義の末尾（:`の直前` または行末）
        - 定義の引数括弧内（`()`や`=`の直後）
        - コンテナ式内(`[]`や`for ... if ...`の直後)
    例：
        def func() <&public>: ...
        def func(<!var args, +define all kwargs>): ...
        VALUE = 42 <&unchanged>
        class ClassName <base: object>: ...
        list_ = [<+put some goodness>]
    アイテム
        key: value:
            値付きの情報
            -値は文字列、識別子、または数値であり、クォートは不要。
        &piyo:
            真であるフラグ (例:&must -> 必ず)
        !piyo:
            偽であるフラグ (例:!must -> オプショナル)
        +piyo:
            AIに対する指示文
            関連する識別子・範囲・定義など(意味的/構造的接続)
            

    - カンマ区切り
    - 順序に意味はない
    - 同じ種類のフラグが重複した場合は最も制限の強い方を優先（例：&must, !must → &mustが優先）
    - <...> メタ情報ブロックは、複数行にわたって記述することができる
      この場合、開き括弧 < と閉じ括弧 > によってブロック全体が囲まれていればよく、
      途中に改行が含まれていてもかまわない。
    
    メタ情報ブロックはアイテムのあとに続けて入れ子にすることができる。これはそのアイテムに関連
    するプロンプトとして解釈すること。続けて二つ以上のメタ情報ブロックを配置することはできない。
    また、入れ子は1段階のみ許可し、それ以上は無視する。
    正: <&annotation<&args, &kwargs, &return value>>
    誤: <&annotation><&args, &kwargs>>   # 2つ以上のメタ情報ブロックを連続して書いている → 不可
    誤: <&annotation<&args<&nested>>>>   # 入れ子が2段階になっている → 不可（1段階のみ許可）
        

    `PSEUDO CODE START`の直下にあるメタ情報ブロックは全体にわたる共通のプロンプトとして解釈する
    ただしこれは、足りない部分を補完する目的としてとらえ、優先度は一番低いものとする。

ID
    疑似コード中では必ず何らかのブロックの中で出現する
    疑似コード外にある場合、補完ブロックとして解釈し、疑似コード中から対応
    する場所を参照する
    例:
        pseudo code
            %@FOO%
        FOO
            some instruction or source
    IDの補完定義は、文書末または別セクションで行うことを想定する。

実コードの範囲指定
    ::ID: description <...>::
    python code
    ::end of ID::
    疑似コード中に現れるpythonの実コード部分の範囲指定を行いメタ情報を与える
    ID:は省略することができる

ブロック
    各ブロックにはメタ情報を含むことができる。必ず、<...>の中に含めて記述すること

    %...% 置き換えブロック
        %ID: description <...>%
        IDの補完ブロックで指定された内容(置き換えるソース、または指示を記す)
        補完ブロックがない場合は、置き換えを行わずそのまま出力する
        ID:は省略することができない

    $...$ 定義ブロック
        後から識別・参照するために、定義をラベル単位でまとめるブロック
        限局定義
            ICID: +|- + ID
                内容によって対応するメタ情報を割り当てる
                +: <&public, !prefix>
                -: <!public, prefix: _>
        $ICID: define (LABEL) <...>$
        ICID:は省略することができる
        (LABEL) は、このブロック内で定義される各シンボルに付与される識別ラベルとなり、
        他の場所から <+put all TAG>のように参照される対象となる。
        例:
            $+DEF_PUB: (PUBF) 全ての公開関数を定義する<>$
            ...
            all_public = [<+put all PUBF name, &must, &name, &str, !value>]

予定
    このバージョンでは補完ブロックに関する仕様が充実していません。
    次回のバージョンに持ち越します。
