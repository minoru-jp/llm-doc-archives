LLMプロンプト埋込用：Python疑似コード記述仕様 V1.2

目的
    本仕様は、Pythonコード内にLLM用プロンプトを構造的に埋め込むための記述ルールを定義する。
    ※本仕様で定義される疑似コードは、Pythonの構文に準拠しつつも、
      LLMによるコード生成を意図した記述であり、そのまま実行可能なコードではありません。

疑似コードの開始と終了
    `PSEUDO CODE START`の記述から`PSEUDO CODE END`までを疑似コードとする

<...> -> プロンプト
    位置別の解釈の方法:
        <...>は任意の位置に置くことができる
        - プロンプトを反映する場所は基本的なpythonの構造に応じて決定する。
        - 関数ブロックの先頭、クラスブロックの先頭、シグネチャ内(宣言/呼び出し)
          コンテキスト式中、右辺値の直後、シグネチャと:の間。などそれに応じた
          場所に反映する。
        - 特に、(pythonコードとして)識別子が期待される位置に現れた <...> は、名前の
          代わりとなるプロンプト(置き換え用)として解釈される。
        - 後ろに出現したプロンプトの方が優先順位が高いものとする
        - ただし、他の部分で、改めて反映する場所が定義されていた場合、それに従う
    トークン
        key: value:
            値付きのトークン
            -値は文字列、識別子、または数値であり、クォートは不要。
        &piyo:
            真であるフラグ (例:&must -> 必ず)
        !piyo:
            偽であるフラグ (例:!must -> オプショナル)
        piyo:
            プレフィクスなし
            - 自然文または単語ベースの（ヒント）
            
    - カンマ区切り
    - 順序に意味はない
    - 同じ種類のフラグが重複した場合は最も制限の強い方を優先（例：&must, !must → &mustが優先）
    - <...> プロンプトブロックは、複数行にわたって記述することができる
      この場合、開き括弧 < と閉じ括弧 > によってブロック全体が囲まれていればよく、
      途中に改行が含まれていてもかまわない。
    
    プロンプトブロックはトークンあとに続けて入れ子にすることができる。トークンの後に続く新たな
    プロンプトブロックは、直前のトークンに対する詳細の記述として解釈する。
    続けて二つ以上のプロンプトブロックが連続した場合後方のブロックは無視する。
    また、入れ子は1段階のみ許可し、それ以上は無視する。
    正: <&annotation<&args, &kwargs, &return value>>
    誤: <&annotation><&args, &kwargs>>   # 2つ以上のプロンプトブロックを連続して書いている → 不可
    誤: <&annotation<&args<&nested>>>>   # 入れ子が2段階になっている → 不可（1段階のみ許可）

identifer:
    他の場所から参照するための識別子
    定義は各ブロック中で行われる
    - BLOCKID:
        ブロックの識別子、省略可能
    - MEMBER:
        - ブロックに複数の要素が存在する可能性のある場合に、その中の一つを
          抽象的に指すための識別子
          例: all_public = [<put all MEMBER name, &must, &name, &str, !value>]
        - ブロック中()で囲まれた識別子はMEMBERとなる
        - 任意の数定義することができる
        - (MEMBER<...>)としてMEMBERに対してプロンプトを記述することができる

ブロック:
    ::...:: ... ::endof BLOCKID:: -> 範囲ブロック
        構造:
            ::BLOCKID: start (MEMBER) <...>::
            ...
            ::end BLOCKID::
        - ID:は省略することができる
        - 各ブロックにはプロンプトを含むことができる。必ず、<...>の中に含めて記述すること
        - MEMBERは開始タグでのみ宣言することができる
        - 特に、startからendに囲まれた部分に(...)があったとしてもそれはMEMBERにはならない

    $...$ -> 定義ブロック
        後から識別・参照するために、定義をラベル単位でまとめるブロック
        構造:
            $BLOCKID: define (MEMBER) <...>$
        - BLOCKID:は省略することができる

v1.1からの変更:
    メタ情報をプロンプトにリネーム
    アイテムをトークンにリネーム
    プロンプトの+プレフィクスを削除
    プロンプトの解釈に`置き換え要素`としての意味を追加
    これらに関連する記述の修正
    範囲ブロックの説明を修正
